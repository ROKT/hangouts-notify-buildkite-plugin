#!/bin/bash
set -euo pipefail

# Set Base Working Directory
basedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

. "$basedir/lib/commit_summary.bash"

echo "--- Sending Hangouts Message"

WEBHOOK_URL="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_WEBHOOK_URL?}"
CHAT_URL=${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_CHAT_ENDPOINT?}
MESSAGE=$(echo "${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_MESSAGE?}" | envsubst)
TYPE=${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_TYPE}

if [ $TYPE == 'CARD' ]
  then 
  TYPE="KeyValueCARD"
fi

if [ $TYPE == 'KeyValueCARD' ]
  then
  WEBHOOK_URL2="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_WEBHOOK_URL2?}"
  WEBHOOK_KEY="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_WEBHOOK_KEY?}"
  USERTOKEN_FAIL="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_USERTOKEN_FAIL?}"
  USERTOKEN_PASS="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_USERTOKEN_PASS?}"
  CARD_DETAILS=${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_CARD_DETAILS}
  ROWS=$(echo "${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_ROWS?}" | envsubst)
fi


if [[ "${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  set -x
fi

if [[ "${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_COMMIT_SUMMARY_ENABLED:-false}" =~ (true|on|1) ]] ; then
    # Generate Commit based message
    BK_FROM_COMMIT="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_COMMIT_SUMMARY_FROM_COMMIT}"
    BK_TO_COMMIT="${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_COMMIT_SUMMARY_TO_COMMIT}"
    SUMMARY_LOG=$(commit_summary "$BK_FROM_COMMIT" "$BK_TO_COMMIT")

    MESSAGE="${MESSAGE}${SUMMARY_LOG}"
    MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
fi

CURRENT_COMMIT=$(git rev-parse HEAD)
THREAD_KEY=${BUILDKITE_PLUGIN_HANGOUTS_NOTIFY_THREAD_KEY:=$CURRENT_COMMIT}

FAIL=0
ROWS_JSON="none"
if [ $TYPE == 'KeyValueCARD' ]
  then

  IFS=, read -r CARD_TITLE CARD_SUBTITLE BUILD_URL <<< "$CARD_DETAILS"

  # Create a list of JSON objects to display the rows in the hangouts card
  IFS=';' read -ra DETAILS <<< "$ROWS"
  for i in "${DETAILS[@]}"; do
      IFS=, read -r ROW_TITLE ROW_INFO ROW_URL <<< "$i"
      if [ $ROW_INFO == "FAILED" ]; then FAIL=1; fi
      if [[ -z "$ROW_URL" ]] || [[ "${ROW_URL}" == "report not available" ]]; then ROW_URL=$BUILD_URL; fi
      if [ $ROWS_JSON == "none" ]
          then
            ROWS_JSON='{ "keyValue":{ "topLabel":"'"$ROW_TITLE"'","content":"'"$ROW_INFO"'","button":{ "textButton":{ "text":"OPEN REPORT","onClick":{ "openLink":{ "url":"'"$ROW_URL"'"}}}}}}'
          else
            ROWS_JSON=$ROWS_JSON,'{ "keyValue":{ "topLabel":"'"$ROW_TITLE"'","content":"'"$ROW_INFO"'","button":{ "textButton":{ "text":"OPEN REPORT","onClick":{ "openLink":{ "url":"'"$ROW_URL"'"}}}}}}'
          fi
  done

  #Set the header icon
  HEADER_ICON='https://roktcdn1.akamaized.net/bbw/success.png'
  if [ $FAIL == 1 ]
    then
      HEADER_ICON='https://roktcdn1.akamaized.net/bbw/failure.png'
    fi

  # Putting the JSON card together for hangouts
  HANGOUTS_CARD_JSON='{"cards":[{"header":{"title":"'"$CARD_TITLE"'","subtitle":"'"$CARD_SUBTITLE"'","imageUrl":"'"$HEADER_ICON"'"},"sections":[{"widgets":['"$ROWS_JSON"']},{"widgets":[{"buttons":[{"textButton":{"text":"GO TO BUILD","onClick":{"openLink":{"url":"'"$BUILD_URL"'"}}}}]}]}]}]}'

  #Create webhook url based of failed tests or not
  if [ $FAIL == 1 ]
    then
      WEBHOOK_URL="${WEBHOOK_URL2}key=${WEBHOOK_KEY}&token=${USERTOKEN_FAIL}"
    else
      WEBHOOK_URL="${WEBHOOK_URL2}key=${WEBHOOK_KEY}&token=${USERTOKEN_PASS}"
    fi
  curl -v --location --request POST "${WEBHOOK_URL}" \
  -H 'Content-Type: application/json' \
  -d ' '"${HANGOUTS_CARD_JSON}"' '

else
    curl -v -X POST                             \
     -H "Content-Type: application/json" \
     --data $'{"text": "'"$MESSAGE"'"}'                   \
     "${WEBHOOK_URL}&threadKey=${THREAD_KEY}"

fi
